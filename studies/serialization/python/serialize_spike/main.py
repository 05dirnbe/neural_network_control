import flatbuffers
# Generated by `flatc`.
import Buffer.Spike

builder = flatbuffers.Builder(0)

Buffer.Spike.SpikeStart(builder)
Buffer.Spike.SpikeAddAddress(builder,230)
Buffer.Spike.SpikeAddTimestamp(builder,10)

spike = Buffer.Spike.SpikeEnd(builder)

builder.Finish(spike)

# We now have a FlatBuffer that we could store on disk or send over a network.

# ...Saving to file or sending over a network code goes here...

# Instead, we are going to access this buffer right away (as if we just
# received it).

buf = builder.Output()

# Note: We use `0` for the offset here, since we got the data using the
# `builder.Output()` method. This simulates the data you would store/receive
# in your FlatBuffer. If you wanted to read from the `builder.Bytes` directly,
# you would need to pass in the offset of `builder.Head()`, as the builder
# actually constructs the buffer backwards.
integer = Buffer.Spike.Spike.GetRootAsSpike(buf, 0)

# Note: We did set the `Value` field explicitly, so we get a value different from default.
assert integer.Address() == 230
assert integer.Timestamp() == 10
print 'The FlatBuffer was successfully created and verified!'