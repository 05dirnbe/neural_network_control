// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CPPBUFFERSPECIFICATIONS_BUFFER_H_
#define FLATBUFFERS_GENERATED_CPPBUFFERSPECIFICATIONS_BUFFER_H_

#include "flatbuffers/flatbuffers.h"

namespace Buffer {

struct IntegerMatrix;

struct IntegerMatrix FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_N = 4,
    VT_M = 6,
    VT_DATA = 8
  };
  int32_t n() const {
    return GetField<int32_t>(VT_N, 0);
  }
  int32_t m() const {
    return GetField<int32_t>(VT_M, 0);
  }
  const flatbuffers::Vector<int32_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_N) &&
           VerifyField<int32_t>(verifier, VT_M) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct IntegerMatrixBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_n(int32_t n) {
    fbb_.AddElement<int32_t>(IntegerMatrix::VT_N, n, 0);
  }
  void add_m(int32_t m) {
    fbb_.AddElement<int32_t>(IntegerMatrix::VT_M, m, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int32_t>> data) {
    fbb_.AddOffset(IntegerMatrix::VT_DATA, data);
  }
  IntegerMatrixBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IntegerMatrixBuilder &operator=(const IntegerMatrixBuilder &);
  flatbuffers::Offset<IntegerMatrix> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<IntegerMatrix>(end);
    return o;
  }
};

inline flatbuffers::Offset<IntegerMatrix> CreateIntegerMatrix(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t n = 0,
    int32_t m = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> data = 0) {
  IntegerMatrixBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_m(m);
  builder_.add_n(n);
  return builder_.Finish();
}

inline flatbuffers::Offset<IntegerMatrix> CreateIntegerMatrixDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t n = 0,
    int32_t m = 0,
    const std::vector<int32_t> *data = nullptr) {
  return Buffer::CreateIntegerMatrix(
      _fbb,
      n,
      m,
      data ? _fbb.CreateVector<int32_t>(*data) : 0);
}

inline const Buffer::IntegerMatrix *GetIntegerMatrix(const void *buf) {
  return flatbuffers::GetRoot<Buffer::IntegerMatrix>(buf);
}

inline bool VerifyIntegerMatrixBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Buffer::IntegerMatrix>(nullptr);
}

inline void FinishIntegerMatrixBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Buffer::IntegerMatrix> root) {
  fbb.Finish(root);
}

}  // namespace Buffer

#endif  // FLATBUFFERS_GENERATED_CPPBUFFERSPECIFICATIONS_BUFFER_H_
